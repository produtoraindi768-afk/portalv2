#!/usr/bin/env tsx

/**
 * Script para verificar se a API Key do Firebase est√° correta
 * Execute: npx tsx src/scripts/verify-api-key.ts
 */

async function verifyApiKey() {
  console.log("üîç Verificando API Key do Firebase...")
  
  try {
    // Obter a API Key das vari√°veis de ambiente
    const apiKey = process.env.NEXT_PUBLIC_FIREBASE_API_KEY
    
    if (!apiKey) {
      console.error("‚ùå API Key n√£o encontrada nas vari√°veis de ambiente")
      console.log("üîß Solu√ß√£o: Configure NEXT_PUBLIC_FIREBASE_API_KEY no Vercel")
      return
    }
    
    console.log("‚úÖ API Key encontrada:", apiKey.substring(0, 10) + "...")
    
    // Testar a API Key fazendo uma requisi√ß√£o para o Firebase
    const projectId = process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID || "dashboard-f0217"
    const url = `https://identitytoolkit.googleapis.com/v1/projects/${projectId}?key=${apiKey}`
    
    console.log("üåê Testando API Key...")
    const response = await fetch(url)
    
    if (response.ok) {
      console.log("‚úÖ API Key v√°lida!")
      try {
        const data = await response.json()
        console.log("üìã Projeto:", data.projectId)
        console.log("üîó Auth Domain:", data.authDomain)
      } catch (parseError) {
        console.log("‚úÖ API Key v√°lida (resposta n√£o-JSON)")
      }
    } else {
      console.error("‚ùå API Key inv√°lida!")
      try {
        const error = await response.json()
        console.error("üìã Erro:", error.error?.message)
      } catch (parseError) {
        console.error("üìã Status:", response.status, response.statusText)
      }
      console.log("üîß Solu√ß√£o: Verifique a API Key no Firebase Console")
    }
    
  } catch (error) {
    console.error("‚ùå Erro ao verificar API Key:", error)
  }
}

// Executar verifica√ß√£o
verifyApiKey()
  .then(() => {
    console.log("\n‚úÖ Verifica√ß√£o conclu√≠da!")
    process.exit(0)
  })
  .catch((error) => {
    console.error("\n‚ùå Verifica√ß√£o falhou:", error)
    process.exit(1)
  })
